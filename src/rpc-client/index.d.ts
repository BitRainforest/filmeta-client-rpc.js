// Code generated by github.com/BitRainforest/filmeta-gen from github.com/BitRainforest/bony/lens DO NOT EDIT.
export declare type Cid = { "/": string };
export declare type Ticket = { VRFProof: string };
export declare type ElectionProof = { WinCount: number; VRFProof: string };
export declare type BeaconEntry = { Round: number; Data: string };
export declare type PoStProof = { PoStProof: number; ProofBytes: string };
export declare type Signature = { Type: number; Data: string };
export declare type BlockHeader = {
  Miner: string;
  Ticket: Ticket;
  ElectionProof: ElectionProof;
  BeaconEntries: Array<BeaconEntry>;
  WinPoStProof: Array<PoStProof>;
  Parents: Array<Cid>;
  ParentWeight: string;
  Height: number;
  ParentStateRoot: Cid;
  ParentMessageReceipts: Cid;
  Messages: Cid;
  BLSAggregate: Signature;
  Timestamp: number;
  BlockSig: Signature;
  ForkSignaling: number;
  ParentBaseFee: string;
};
export declare type Message = {
  Version: number;
  To: string;
  From: string;
  Nonce: number;
  Value: string;
  GasLimit: number;
  GasFeeCap: string;
  GasPremium: string;
  Method: number;
  Params: string;
};
export declare type SignedMessage = { Message: Message; Signature: Signature };
export declare type BlockMessages = {
  BlsMessages: Array<Message>;
  SecpkMessages: Array<SignedMessage>;
  Cids: Array<Cid>;
};
export declare type ExpTipSet = {
  Cids: Array<Cid>;
  Blocks: Array<BlockHeader>;
  Height: number;
};
export declare type TipSet = {
  Cids: Array<Cid>;
  Blocks: Array<BlockHeader>;
  Height: number;
};
export declare type Message1 = { Cid: Cid; Message: Message };
export declare type MessageReceipt = {
  ExitCode: number;
  Return: string;
  GasUsed: number;
};
export declare type HeadChange = { Type: string; Val: TipSet };
export declare type ObjStat = { Size: number; Links: number };
export declare type Actor = {
  Code: Cid;
  Head: Cid;
  Nonce: number;
  Balance: string;
};
export declare type DealProposal = {
  PieceCID: Cid;
  PieceSize: number;
  VerifiedDeal: boolean;
  Client: string;
  Provider: string;
  Label: string;
  StartEpoch: number;
  EndEpoch: number;
  StoragePricePerEpoch: string;
  ProviderCollateral: string;
  ClientCollateral: string;
};
export declare type DealState = {
  SectorStartEpoch: number;
  LastUpdatedEpoch: number;
  SlashEpoch: number;
};
export declare type MarketDeal = { Proposal: DealProposal; State: DealState };
export declare type BitField = {};
export declare type Deadline = {
  PostSubmissions: BitField;
  DisputableProofCount: number;
};
export declare type MinerInfo = {
  Owner: string;
  Worker: string;
  NewWorker: string;
  ControlAddresses: Array<string>;
  WorkerChangeEpoch: number;
  PeerId: string;
  Multiaddrs: Array<string>;
  WindowPoStProofType: number;
  SectorSize: number;
  WindowPoStPartitionSectors: number;
  ConsensusFaultElapsed: number;
};
export declare type Partition = {
  AllSectors: BitField;
  FaultySectors: BitField;
  RecoveringSectors: BitField;
  LiveSectors: BitField;
  ActiveSectors: BitField;
};
export declare type Claim = { RawBytePower: string; QualityAdjPower: string };
export declare type MinerPower = {
  MinerPower: Claim;
  TotalPower: Claim;
  HasMinPower: boolean;
};
export declare type MinerSectors = {
  Live: number;
  Active: number;
  Faulty: number;
};
export declare type ActorState = { Balance: string; Code: Cid; State: any };
export declare type SectorExpiration = { OnTime: number; Early: number };
export declare type SectorOnChainInfo = {
  SectorNumber: number;
  SealProof: number;
  SealedCID: Cid;
  DealIDs: Array<number>;
  Activation: number;
  Expiration: number;
  DealWeight: string;
  VerifiedDealWeight: string;
  InitialPledge: string;
  ExpectedDayReward: string;
  ExpectedStoragePledge: string;
  SectorKeyCID: Cid;
};
export declare type SectorLocation = { Deadline: number; Partition: number };
export declare type SectorPreCommitInfo = {
  SealProof: number;
  SectorNumber: number;
  SealedCID: Cid;
  SealRandEpoch: number;
  DealIDs: Array<number>;
  Expiration: number;
  ReplaceCapacity: boolean;
  ReplaceSectorDeadline: number;
  ReplaceSectorPartition: number;
  ReplaceSectorNumber: number;
};
export declare type SectorPreCommitOnChainInfo = {
  Info: SectorPreCommitInfo;
  PreCommitDeposit: string;
  PreCommitEpoch: number;
  DealWeight: string;
  VerifiedDealWeight: string;
};
export declare type CirculatingSupply = {
  FilVested: string;
  FilMined: string;
  FilBurnt: string;
  FilLocked: string;
  FilCirculating: string;
  FilReserveDisbursed: string;
};
export declare type BlockHeader1 = {
  Cid: Cid;
  Height: number;
  Miner: string;
  Parents: Array<Cid>;
  ParentWeight: string;
  ParentBaseFee: string;
  ParentStateRoot: Cid;
  ParentMessageReceipts: Cid;
  Messages: Cid;
  MessagesCount: number;
  BlsCids: Array<Cid>;
  SecpkCids: Array<Cid>;
  Ticket: string;
  ElectionProof: string;
  WinCount: number;
  ForkSignaling: number;
  BlockSig: string;
  BLSAggregate: string;
  BeaconEntries: Array<string>;
  WinPoStProof: Array<string>;
  Size: number;
  Timestamp: number;
};
export declare type BlockMessages1 = {
  Cid: Cid;
  Miner: string;
  Height: number;
  BlsCids: Array<Cid>;
  SecpkCids: Array<Cid>;
};
export declare type ListReturn = { Total: number; Data: any };
export declare type Reward = {
  Cid: Cid;
  Height: number;
  Miner: string;
  Penalty: string;
  GasReward: string;
  MineReward: string;
  WinCount: number;
};
export declare type Message2 = {
  Cid: Cid;
  Version: number;
  Nonce: number;
  Height: number;
  StateRoot: Cid;
  From: string;
  FromActorID: string;
  To: string;
  ToActorID: string;
  Value: string;
  Method: number;
  ActorName: string;
  ActorFamily: string;
  ExitCode: number;
  GasUsed: number;
  Params: string;
  GasLimit: number;
  GasFeeCap: string;
  GasPremium: string;
  ParentBaseFee: string;
  BaseFeeBurn: string;
  OverEstimationBurn: string;
  MinerPenalty: string;
  MinerTip: string;
  Refund: string;
  GasRefund: number;
  GasBurned: number;
  SizeBytes: number;
};

export declare class LotusRPC {
  constructor(provider: any, options: { schema: any });
  chainGetBlock(cid: Cid): Promise<BlockHeader>;
  chainGetBlockMessages(cid: Cid): Promise<BlockMessages>;
  chainGetGenesis(): Promise<TipSet>;
  chainGetParentMessages(cid: Cid): Promise<Array<Message1>>;
  chainGetParentReceipts(cid: Cid): Promise<Array<MessageReceipt>>;
  chainGetTipSet(tipSetKey: Cid[]): Promise<TipSet>;
  chainGetTipSetAfterHeight(
    chainEpoch: number,
    tipSetKey: Cid[],
  ): Promise<TipSet>;
  chainGetTipSetByHeight(chainEpoch: number, tipSetKey: Cid[]): Promise<TipSet>;
  chainHasObj(cid: Cid): Promise<boolean>;
  chainHead(): Promise<TipSet>;
  chainNotify(
    handler: (data: Array<HeadChange>) => void,
  ): [() => void, Promise<void>];
  chainReadObj(cid: Cid): Promise<string>;
  chainSetHead(tipSetKey: Cid[]): Promise<void>;
  chainStatObj(cid: Cid, cid1: Cid): Promise<ObjStat>;
  stateChangedActors(cid: Cid, cid1: Cid): Promise<{ [k: string]: Actor }>;
  stateGetActor(address: string, tipSetKey: Cid[]): Promise<Actor>;
  stateGetReceipt(cid: Cid, tipSetKey: Cid[]): Promise<MessageReceipt>;
  stateListActors(tipSetKey: Cid[]): Promise<Array<string>>;
  stateMarketDeals(tipSetKey: Cid[]): Promise<{ [k: string]: MarketDeal }>;
  stateMinerDeadlines(
    address: string,
    tipSetKey: Cid[],
  ): Promise<Array<Deadline>>;
  stateMinerInfo(address: string, tipSetKey: Cid[]): Promise<MinerInfo>;
  stateMinerPartitions(
    address: string,
    uint: number,
    tipSetKey: Cid[],
  ): Promise<Array<Partition>>;
  stateMinerPower(address: string, tipSetKey: Cid[]): Promise<MinerPower>;
  stateMinerSectorAllocated(
    address: string,
    sectorNumber: number,
    tipSetKey: Cid[],
  ): Promise<boolean>;
  stateMinerSectorCount(
    address: string,
    tipSetKey: Cid[],
  ): Promise<MinerSectors>;
  stateNetworkName(): Promise<string>;
  stateReadState(address: string, tipSetKey: Cid[]): Promise<ActorState>;
  stateSectorExpiration(
    address: string,
    sectorNumber: number,
    tipSetKey: Cid[],
  ): Promise<SectorExpiration>;
  stateSectorGetInfo(
    address: string,
    sectorNumber: number,
    tipSetKey: Cid[],
  ): Promise<SectorOnChainInfo>;
  stateSectorPartition(
    address: string,
    sectorNumber: number,
    tipSetKey: Cid[],
  ): Promise<SectorLocation>;
  stateSectorPreCommitInfo(
    address: string,
    sectorNumber: number,
    tipSetKey: Cid[],
  ): Promise<SectorPreCommitOnChainInfo>;
  stateVMCirculatingSupplyInternal(
    tipSetKey: Cid[],
  ): Promise<CirculatingSupply>;
  blockHeaderByCid(cid: Cid): Promise<BlockHeader1>;
  blockMessageCidsByCid(cid: Cid): Promise<BlockMessages1>;
  blockMessagesByCid(cid: Cid, int: number, int1: number): Promise<ListReturn>;
  blockRewardByCid(cid: Cid): Promise<Reward>;
  internalMessageBySourceMessage(
    cid: Cid,
    int: number,
    int1: number,
  ): Promise<ListReturn>;
  messageByCid(cid: Cid): Promise<Message2>;
  minerBurnAmount(
    address: string,
    chainEpoch: number,
    chainEpoch1: number,
  ): Promise<string>;
  minerSectorEventCount(
    address: string,
    int: number,
    chainEpoch: number,
    chainEpoch1: number,
  ): Promise<number>;
  importFile(
    body:
      | Blob
      | BufferSource
      | FormData
      | URLSearchParams
      | string
      | ReadableStream,
  ): string;
  destroy(code?: number): void;
}
